package io.reactivesw.productType

import io.reactivesw.config.ProductTypeConfig
import io.reactivesw.util.CleanupMap
import io.reactivesw.util.CleanupUtil
import io.reactivesw.util.ProductTypeDataFactory
import io.reactivesw.util.RestClientFactory
import spock.lang.Shared
import spock.lang.Specification

class UpdateProductTypeTest extends Specification {
    @Shared
    def id
    @Shared
    def version
    @Shared
    def client
    @Shared
    def productType
    @Shared
    CleanupMap cleanupMap = new CleanupMap()

    def setupSpec() {
        productType = ProductTypeDataFactory.getCreateProductType().validProductType1
        client = RestClientFactory.getClient(ProductTypeConfig.ROOTURL)
        def response = client.post(body: productType)
        id = response.data.id
        version = response.data.version
        cleanupMap.addObject(response.data.id, response.data.version)
    }

    def "Test1: update product type with valid name, should return 200 ok and productTypeView"() {

        given: "prepare data"
        def setName = ProductTypeDataFactory.getUpdateProductType().validSetName
        setName['version'] = cleanupMap.allObjects[id]

        when: "call function to update product type name"
        def response = client.put([path: id, body: setName])

        then: "should return 200 ok and productTypeView"
        cleanupMap.addObject(response.data.id, response.data.version)
        response.status == 200
        response.data.name == setName.actions[0].name
    }

    def "Test2: update product type with empty name, should return 400 bad request"() {
        given: "prepare data"
        def invalidSetName = ProductTypeDataFactory.getUpdateProductType().invalidSetName
        invalidSetName['version'] = cleanupMap.allObjects[id]

        when: "call function to update product type name"
        def response = client.put([path: id, body: invalidSetName])

        then: "should return 400 bad request"
        response == 400
    }

    def "Test3: update product type with valid description, should return 200 ok and productTypeView"() {
        given: "prepare data"
        def setDescription = ProductTypeDataFactory.getUpdateProductType().validSetDescription
        setDescription['version'] = cleanupMap.allObjects[id]

        when: "call function to update product type description"
        def response = client.put([path: id, body: setDescription])

        then: "should return 200 ok and productTypeView"
        cleanupMap.addObject(response.data.id, response.data.version)
        response.status == 200
        response.data.decription = setDescription.actions[0].description
    }

    def "Test4: update product type with empty description, should return 400 bad request"() {
        given: "prepare data"
        def invalidSetDescription = ProductTypeDataFactory.getUpdateProductType().invalidSetDescription
        invalidSetDescription['version'] = cleanupMap.allObjects[id]

        when: "call function to update product type description"
        def response = client.put([path: id, body: invalidSetDescription])

        then: "should return 400 bad request"
        response == 400
    }

    def "Test5: update product type with invalid attribute, should return 400 bad request and productTypeView"() {
        given: "prepare data"
        def invalidAddAttributeDefinition = ProductTypeDataFactory.getUpdateProductType().invalidAddAttributeDefinition
        invalidAddAttributeDefinition['version'] = cleanupMap.allObjects[id]

        when: "call function to update product type attributes"
        def response = client.put([path: id, body: invalidAddAttributeDefinition])

        then: "should return 400 bad request"
        response == 400
    }

    def "Test6: update product type with valid attribute, should return 200 ok and productTypeView"() {
        given: "prepare data"
        def validAddAttributeDefinition = ProductTypeDataFactory.getUpdateProductType().validAddAttributeDefinition
        validAddAttributeDefinition['version'] = cleanupMap.allObjects[id]

        when: "call function to update product type attributes"
        def response = client.put([path: id, body: validAddAttributeDefinition])

        then: "should return 200 ok and productTypeView"
        cleanupMap.addObject(response.data.id, response.data.version)
        response.status == 200

    }

    def "Test7: update product type with valid remove attribute definition, should return 200 ok and productTypeView"() {
        given: "prepare data"
        def validRemoveAttributeDefinition = ProductTypeDataFactory.getUpdateProductType().validRemoveAttributeDefinition
        validRemoveAttributeDefinition['version'] = cleanupMap.allObjects[id]

        when: "call function to remove attribute definition"
        def response = client.put([path: id, body: validRemoveAttributeDefinition])

        then: "should return 200 ok and productTypeView"
        cleanupMap.addObject(response.data.id, response.data.version)
        response.status == 200
    }

    def "Test8: update product type with wrong attribute name, should return 400 bad request"() {
        given: "prepare data"
        def invalidRemoveAttributeDefinition = ProductTypeDataFactory.getUpdateProductType().invalidRemoveAttributeDefinition
        invalidRemoveAttributeDefinition['version'] = cleanupMap.allObjects[id]

        when: "call function to remove attribute definition"
        def response = client.put([path: id, body: invalidRemoveAttributeDefinition])

        then: "should return 400 bad request"
        response == 400
    }

    def "Test9: update product type with valid attribute label, should return 200 ok and productTypeView"() {
        given: "prepare data"
        def validSetAttributeLabel = ProductTypeDataFactory.getUpdateProductType().validSetAttributeLabel
        validSetAttributeLabel['version'] = cleanupMap.allObjects[id]

        when: "call function to set attribute label"
        def response = client.put([path: id, body: validSetAttributeLabel])

        then: "should return 200 ok and productTypeView"
        cleanupMap.addObject(response.data.id, response.data.version)
        response.status == 200
    }

    def "Test10: update product type with not-exist attribute label, should return 400 bad request"() {
        given: "prepare data"
        def invalidSetAttributeLabel = ProductTypeDataFactory.getUpdateProductType().invalidSetAttributeLabel
        invalidSetAttributeLabel['version'] = cleanupMap.allObjects[id]

        when: "call function to set attribute label"
        def response = client.put([path: id, body: invalidSetAttributeLabel])

        then: "should return 400 bad request"
        response == 400
    }

    def cleanupSpec() {
        if (!cleanupMap.isEmpty()) {
            CleanupUtil.cleanup(ProductTypeConfig.ROOTURL, cleanupMap)
        }
    }
}